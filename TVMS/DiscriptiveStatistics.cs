using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TVMS
{

    class DiscriptiveStatistics
    {
        /// <summary>
        /// Нахождение среднего для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Average(double[] arr)
        {
            return arr.Sum() / arr.Length;
        }
        /// <summary>
        /// Нахождение стандартной ошибки для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double StandartError(double[] arr)
        {
            return StandartDeviation(arr) / Math.Sqrt(arr.Length);
        }
        /// <summary>
        /// Нахождение моды для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Fashion(double[] arr)
        {
            var dic = arr.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => new { Element = y.Key, Count = y.Count() }).ToList();
            var w = from v in dic orderby v.Count select v;
            return w.Last().Element;
        }
        /// <summary>
        /// Нахождение максимального элемента для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Max(double[] arr)
        {
            return arr.Max();
        }
        /// <summary>
        /// Нахождение минимального элемента для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Min(double[] arr)
        {
            return arr.Min();
        }
        /// <summary>
        /// Нахождение эксцеса для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Excess(double[] arr)
        {
            double aver = Average(arr);
            double res = 0;
            foreach (double x in arr)
                res += (x - aver) * (x - aver) * (x - aver) * (x - aver);
            double n = arr.Length;
            res /= Math.Pow(StandartDeviation(arr), 4);
            res *= (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
            res -= 3 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));
            return res;
        }
        /// <summary>
        /// Нахождение суммы всех элементов для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Amount(double[] arr)
        {
            return arr.Sum();
        }
        /// <summary>
        /// Нахождение интервала для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Interval(double[] arr)
        {
            return Max(arr) - Min(arr);
        }
        /// <summary>
        /// Нахождение стандартного отклонения для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double StandartDeviation(double[] arr)
        {
            return Math.Sqrt(Dispersion(arr));
        }
        /// <summary>
        /// Нахождение асимметрии для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Asymmetry(double[] arr)
        {
            double aver = Average(arr);
            double res = 0;
            foreach (double x in arr)
                res += (x - aver) * (x - aver) * (x - aver);
            res /= Math.Pow(StandartDeviation(arr), 3);
            res *= (double)arr.Length / (double)((arr.Length - 1) * (arr.Length - 2));
            return res;
        }
        /// <summary>
        /// Нахождение медианы для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Median(double[] arr)
        {
            var s = from t in arr orderby t select t;
            var d = s.Select((elem, index) => new { index, elem = arr[index] });

            var e = s.ToArray().GetValue(s.ToArray().Count() / 2);

            if (arr.Length % 2 != 0) return (double)e;

            var f1 = s.ToArray().GetValue(s.ToArray().Count() / 2 - 1);
            return ((double)f1 + (double)e) / 2;
            //return f1;
        }
        /// <summary>
        /// Нахождение дисперсии для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        /// <returns></returns>
        public static double Dispersion(double[] arr)
        {
            double aver = Average(arr);
            double res = 0;
            foreach (double x in arr)
                res += (x - aver) * (x - aver);
            res /= arr.Length - 1;
            return res;
        }
        /// <summary>
        /// Вывод описательной статистики для какой-то совокупности
        /// </summary>
        /// <param name="arr">Какая-то совокупность</param>
        public static string Output_descriptive_statistics(double[] arr)
        {
            string s = "Описательная статистика: ";
            s += "\nСреднее: " + Average(arr);
            s += "\nСумма: " + Amount(arr);
            s += "\nСтандартная ошибка: " + StandartError(arr);
            s += "\nМедиана: " + Median(arr);
            s += "\nМода: " + Fashion(arr);
            s += "\nСтандартное отклонение: " + StandartDeviation(arr);
            s += "\nДисперсия выборки: " + Dispersion(arr);
            s += "\nЭксцесс: " + Excess(arr);
            s += "\nАсимметричность: " + Asymmetry(arr);
            s += "\nИнтервал: " + Interval(arr);
            s += "\nМинимум: " + Min(arr);
            s += "\nМаксимум: " + Max(arr);
            s += "\nСчет: " + arr.Length;
            return s;
        }
        /// <summary>
        /// Нормирование с помощью максимального и минимального элементов
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        public static double[] Rationing_MaxMin(double[] arr)
        {
            double MM = Max(arr) - Min(arr);
            var s = arr.Select(x => x / MM).ToArray();
            return s;
        }
        /// <summary>
        /// Нормирование с помощью дисперсии
        /// </summary>
        /// <param name="arr"></param>
        public static void Rationing_Dispersive(double[][] arr)
        {

        }
        /// <summary>
        /// Вывод массива
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        public static string Output(double[] arr)
        {
            string s = "";
            for (int i = 0; i < arr.Length; i++)
            {
                s+=string.Format("{0:F2} ", arr[i]);
            }
            s += "\n";
            return s;
        }
        public static string Save(double[] arr)
        {
            string s = "";
            for (int i = 0; i < arr.Length; i++)
            {
                s += string.Format("{0}\r\n", arr[i]);
            }
            s += "\n";
            return s;
        }
        /// <summary>
        /// Получение массива выборки данных из строки
        /// </summary>
        /// <param name="source">Исходная строка</param>
        /// <returns></returns>
        public static double[] GetSample(string source)
        {
            string[] s = source.Trim().Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries).Select(x => x.Replace('.', ',')).ToArray();
            double[] arr = new double[s.Length];

            for (int i = 0; i < s.Length; i++)
            {
                arr[i] = double.Parse(s[i]);
            }

            return arr;
        }
        /// <summary>
        /// Вывод массива массивов
        /// </summary>
        /// <param name="arr"></param>
        /// <returns></returns>
        public static string Output(double[][] arr)
        {
            string s = "";
            for(int i = 0; i < arr.Length; i++)
            {
                double[] buf = arr[i];
                for (int j = 0; j < buf.Length; j++) s += buf[j] + " ";
                s += "\n";
            }
            return s;
        }
      
        /// <summary>
        /// Получение строки из определенного столбца в заданном диапазоне
        /// </summary>
        /// <param name="Colum">Столбец для считывания</param>
        /// <param name="Start">Начало интервала</param>
        /// <param name="End">Конец интервала</param>
        /// <returns></returns>
        public static string OpenExcel(string Colum, int Start, int End)
        {
            string s = "";
            OpenFileDialog ofd = new OpenFileDialog();
            if (ofd.ShowDialog() == true)
            {
                Microsoft.Office.Interop.Excel.Application ObjExcel = new Microsoft.Office.Interop.Excel.Application();
                Microsoft.Office.Interop.Excel.Workbook ObjWorkbook = ObjExcel.Workbooks.Open(ofd.FileName, 0, false, 5, "", "", false, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);
                Microsoft.Office.Interop.Excel.Worksheet objworksheet = (Microsoft.Office.Interop.Excel.Worksheet)ObjWorkbook.Sheets[1];
                for (int i = Start; i < End+1; i++)
                {
                    Microsoft.Office.Interop.Excel.Range range = objworksheet.get_Range(Colum + i.ToString(),Colum + i.ToString());
                    s += range.Text + "\r\n";
                }
                ObjExcel.Quit();
            }
            return s;
        }
        /// <summary>
        /// Получение значения функции Лапласа
        /// </summary>
        /// <param name="argument"></param>
        /// <returns></returns>
        public static double GetValueLaplasFunction(double argument)
        {
            double value = 0;

            Dictionary<double, double> Laplas = new Dictionary<double, double> { {0,0},
{0.01,0.0039894},
{0.02,0.0079783},
{0.03,0.0119665},
{0.04,0.0159534},
{0.05,0.0199388},
{0.06,0.0239222},
{0.07,0.0279032},
{0.08,0.0318814},
{0.09,0.0358564},
{0.1,0.0398278},
{0.11,0.0437953},
{0.12,0.0477584},
{0.13,0.0517168},
{0.14,0.0556700},
{0.15,0.0596177},
{0.16,0.0635595},
{0.17,0.0674949},
{0.18,0.0714237},
{0.19,0.0753454},
{0.2,0.0792597},
{0.21,0.0831662},
{0.22,0.0870644},
{0.23,0.0909541},
{0.24,0.0948349},
{0.25,0.0987063},
{0.26,0.1025681},
{0.27,0.1064199},
{0.28,0.1102612},
{0.29,0.1140919},
{0.3,0.1179114},
{0.31,0.1217195},
{0.32,0.1255158},
{0.33,0.1293000},
{0.34,0.1330717},
{0.35,0.1368307},
{0.36,0.1405764},
{0.37,0.1443088},
{0.38,0.1480273},
{0.39,0.1517317},
{0.4,0.1554217},
{0.41,0.1590970},
{0.42,0.1627573},
{0.43,0.1664022},
{0.44,0.1700314},
{0.45,0.1736448},
{0.46,0.1772419},
{0.47,0.1808225},
{0.48,0.1843863},
{0.49,0.1879331},
{0.5,0.1914625},
{0.51,0.1949743},
{0.52,0.1984682},
{0.53,0.2019440},
{0.54,0.2054015},
{0.55,0.2088403},
{0.56,0.2122603},
{0.57,0.2156612},
{0.58,0.2190427},
{0.59,0.2224047},
{0.6,0.2257469},
{0.61,0.2290691},
{0.62,0.2323711},
{0.63,0.2356527},
{0.64,0.2389137},
{0.65,0.2421539},
{0.66,0.2453731},
{0.67,0.2485711},
{0.68,0.2517478},
{0.69,0.2549029},
{0.7,0.2580363},
{0.71,0.2611479},
{0.72,0.2642375},
{0.73,0.2673049},
{0.74,0.2703500},
{0.75,0.2733726},
{0.76,0.2763727},
{0.77,0.2793501},
{0.78,0.2823046},
{0.79,0.2852361},
{0.8,0.2881446},
{0.81,0.2910299},
{0.82,0.2938919},
{0.83,0.2967306},
{0.84,0.2995458},
{0.85,0.3023375},
{0.86,0.3051055},
{0.87,0.3078498},
{0.88,0.3105703},
{0.89,0.3132671},
{0.9,0.3159399},
{0.91,0.3185887},
{0.92,0.3212136},
{0.93,0.3238145},
{0.94,0.3263912},
{0.95,0.3289439},
{0.96,0.3314724},
{0.97,0.3339768},
{0.98,0.3364569},
{0.99,0.3389129},
{1,0.3413447},
{1.01,0.3437524},
{1.02,0.3461358},
{1.03,0.3484950},
{1.04,0.3508300},
{1.05,0.3531409},
{1.06,0.3554277},
{1.07,0.3576903},
{1.08,0.3599289},
{1.09,0.3621434},
{1.1,0.3643339},
{1.11,0.3665005},
{1.12,0.3686431},
{1.13,0.3707619},
{1.14,0.3728568},
{1.15,0.3749281},
{1.16,0.3769756},
{1.17,0.3789995},
{1.18,0.3809999},
{1.19,0.3829768},
{1.2,0.3849303},
{1.21,0.3868606},
{1.22,0.3887676},
{1.23,0.3906514},
{1.24,0.3925123},
{1.25,0.3943502},
{1.26,0.3961653},
{1.27,0.3979577},
{1.28,0.3997274},
{1.29,0.4014747},
{1.3,0.4031995},
{1.31,0.4049021},
{1.32,0.4065825},
{1.33,0.4082409},
{1.34,0.4098773},
{1.35,0.4114920},
{1.36,0.4130850},
{1.37,0.4146565},
{1.38,0.4162067},
{1.39,0.4177356},
{1.4,0.4192433},
{1.41,0.4207302},
{1.42,0.4221962},
{1.43,0.4236415},
{1.44,0.4250663},
{1.45,0.4264707},
{1.46,0.4278550},
{1.47,0.4292191},
{1.48,0.4305634},
{1.49,0.4318879},
{1.5,0.4331928},
{1.51,0.4344783},
{1.52,0.4357445},
{1.53,0.4369916},
{1.54,0.4382198},
{1.55,0.4394292},
{1.56,0.4406201},
{1.57,0.4417924},
{1.58,0.4429466},
{1.59,0.4440826},
{1.6,0.4452007},
{1.61,0.4463011},
{1.62,0.4473839},
{1.63,0.4484493},
{1.64,0.4494974},
{1.65,0.4505285},
{1.66,0.4515428},
{1.67,0.4525403},
{1.68,0.4535213},
{1.69,0.4544860},
{1.7,0.4554345},
{1.71,0.4563671},
{1.72,0.4572838},
{1.73,0.4581849},
{1.74,0.4590705},
{1.75,0.4599408},
{1.76,0.4607961},
{1.77,0.4616364},
{1.78,0.4624620},
{1.79,0.4632730},
{1.8,0.4640697},
{1.81,0.4648521},
{1.82,0.4656205},
{1.83,0.4663750},
{1.84,0.4671159},
{1.85,0.4678432},
{1.86,0.4685572},
{1.87,0.4692581},
{1.88,0.4699460},
{1.89,0.4706210},
{1.9,0.4712834},
{1.91,0.4719334},
{1.92,0.4725711},
{1.93,0.4731966},
{1.94,0.4738102},
{1.95,0.4744119},
{1.96,0.4750021},
{1.97,0.4755808},
{1.98,0.4761482},
{1.99,0.4767045},
{2,0.4772499},
{2.01,0.4777844},
{2.02,0.4783083},
{2.03,0.4788217},
{2.04,0.4793248},
{2.05,0.4798178},
{2.06,0.4803007},
{2.07,0.4807738},
{2.08,0.4812372},
{2.09,0.4816911},
{2.1,0.4821356},
{2.11,0.4825708},
{2.12,0.4829970},
{2.13,0.4834142},
{2.14,0.4838226},
{2.15,0.4842224},
{2.16,0.4846137},
{2.17,0.4849966},
{2.18,0.4853713},
{2.19,0.4857379},
{2.2,0.4860966},
{2.21,0.4864474},
{2.22,0.4867906},
{2.23,0.4871263},
{2.24,0.4874545},
{2.25,0.4877755},
{2.26,0.4880894},
{2.27,0.4883962},
{2.28,0.4886962},
{2.29,0.4889893},
{2.3,0.4892759},
{2.31,0.4895559},
{2.32,0.4898296},
{2.33,0.4900969},
{2.34,0.4903581},
{2.35,0.4906133},
{2.36,0.4908625},
{2.37,0.4911060},
{2.38,0.4913437},
{2.39,0.4915758},
{2.4,0.4918025},
{2.41,0.4920237},
{2.42,0.4922397},
{2.43,0.4924506},
{2.44,0.4926564},
{2.45,0.4928572},
{2.46,0.4930531},
{2.47,0.4932443},
{2.48,0.4934309},
{2.49,0.4936128},
{2.5,0.4937903},
{2.51,0.4939634},
{2.52,0.4941323},
{2.53,0.4942969},
{2.54,0.4944574},
{2.55,0.4946139},
{2.56,0.4947664},
{2.57,0.4949151},
{2.58,0.4950600},
{2.59,0.4952012},
{2.6,0.4953388},
{2.61,0.4954729},
{2.62,0.4956035},
{2.63,0.4957308},
{2.64,0.4958547},
{2.65,0.4959754},
{2.66,0.4960930},
{2.67,0.4962074},
{2.68,0.4963189},
{2.69,0.4964274},
{2.7,0.4965330},
{2.71,0.4966358},
{2.72,0.4967359},
{2.73,0.4968333},
{2.74,0.4969280},
{2.75,0.4970202},
{2.76,0.4971099},
{2.77,0.4971972},
{2.78,0.4972821},
{2.79,0.4973646},
{2.8,0.4974449},
{2.81,0.4975229},
{2.82,0.4975988},
{2.83,0.4976726},
{2.84,0.4977443},
{2.85,0.4978140},
{2.86,0.4978818},
{2.87,0.4979476},
{2.88,0.4980116},
{2.89,0.4980738},
{2.9,0.4981342},
{2.91,0.4981929},
{2.92,0.4982498},
{2.93,0.4983052},
{2.94,0.4983589},
{2.95,0.4984111},
{2.96,0.4984618},
{2.97,0.4985110},
{2.98,0.4985588},
{2.99,0.4986051},
{3,0.4986501},
{3.01,0.4986938},
{3.02,0.4987361},
{3.03,0.4987772},
{3.04,0.4988171},
{3.05,0.4988558},
{3.06,0.4988933},
{3.07,0.4989297},
{3.08,0.4989650},
{3.09,0.4989992},
{3.1,0.4990324},
{3.11,0.4990646},
{3.12,0.4990957},
{3.13,0.4991260},
{3.14,0.4991553},
{3.15,0.4991836},
{3.16,0.4992112},
{3.17,0.4992378},
{3.18,0.4992636},
{3.19,0.4992886},
{3.2,0.4993129},
{3.21,0.4993363},
{3.22,0.4993590},
{3.23,0.4993810},
{3.24,0.4994024},
{3.25,0.4994230},
{3.26,0.4994429},
{3.27,0.4994623},
{3.28,0.4994810},
{3.29,0.4994991},
{3.3,0.4995166},
{3.31,0.4995335},
{3.32,0.4995499},
{3.33,0.4995658},
{3.34,0.4995811},
{3.35,0.4995959},
{3.36,0.4996103},
{3.37,0.4996242},
{3.38,0.4996376},
{3.39,0.4996505},
{3.4,0.4996631},
{3.41,0.4996752},
{3.42,0.4996869},
{3.43,0.4996982},
{3.44,0.4997091},
{3.45,0.4997197},
{3.46,0.4997299},
{3.47,0.4997398},
{3.48,0.4997493},
{3.49,0.4997585},
{3.5,0.4997674},
{3.51,0.4997759},
{3.52,0.4997842},
{3.53,0.4997922},
{3.54,0.4997999},
{3.55,0.4998074},
{3.56,0.4998146},
{3.57,0.4998215},
{3.58,0.4998282},
{3.59,0.4998347},
{3.6,0.4998409},
{3.61,0.4998469},
{3.62,0.4998527},
{3.63,0.4998583},
{3.64,0.4998637},
{3.65,0.4998689},
{3.66,0.4998739},
{3.67,0.4998787},
{3.68,0.4998834},
{3.69,0.4998879},
{3.7,0.4998922},
{3.71,0.4998964},
{3.72,0.4999004},
{3.73,0.4999043},
{3.74,0.4999080},
{3.75,0.4999116},
{3.76,0.4999150},
{3.77,0.4999184},
{3.78,0.4999216},
{3.79,0.4999247},
{3.8,0.4999277},
{3.81,0.4999305},
{3.82,0.4999333},
{3.83,0.4999359},
{3.84,0.4999385},
{3.85,0.4999409},
{3.86,0.4999433},
{3.87,0.4999456},
{3.88,0.4999478},
{3.89,0.4999499},
{3.9,0.4999519},
{3.91,0.4999539},
{3.92,0.4999557},
{3.93,0.4999575},
{3.94,0.4999593},
{3.95,0.4999609},
{3.96,0.4999625},
{3.97,0.4999641},
{3.98,0.4999655},
{3.99,0.4999670},
{4,0.4999683},
{4.01,0.4999696},
{4.02,0.4999709},
{4.03,0.4999721},
{4.04,0.4999733},
{4.05,0.4999744},
{4.06,0.4999755},
{4.07,0.4999765},
{4.08,0.4999775},
{4.09,0.4999784},
{4.1,0.4999793},
{4.11,0.4999802},
{4.12,0.4999811},
{4.13,0.4999819},
{4.14,0.4999826},
{4.15,0.4999834},
{4.16,0.4999841},
{4.17,0.4999848},
{4.18,0.4999854},
{4.19,0.4999861},
{4.2,0.4999867},
{4.21,0.4999872},
{4.22,0.4999878},
{4.23,0.4999883},
{4.24,0.4999888},
{4.25,0.4999893},
{4.26,0.4999898},
{4.27,0.4999902},
{4.28,0.4999907},
{4.29,0.4999911},
{4.3,0.4999915},
{4.31,0.4999918},
{4.32,0.4999922},
{4.33,0.4999925},
{4.34,0.4999929},
{4.35,0.4999932},
{4.36,0.4999935},
{4.37,0.4999938},
{4.38,0.4999941},
{4.39,0.4999943},
{4.4,0.4999946},
{4.41,0.4999948},
{4.42,0.4999951},
{4.43,0.4999953},
{4.44,0.4999955},
{4.45,0.4999957},
{4.46,0.4999959},
{4.47,0.4999961},
{4.48,0.4999963},
{4.49,0.4999964},
{4.5,0.4999966},
{4.51,0.4999968},
{4.52,0.4999969},
{4.53,0.4999971},
{4.54,0.4999972},
{4.55,0.4999973},
{4.56,0.4999974},
{4.57,0.4999976},
{4.58,0.4999977},
{4.59,0.4999978},
{4.6,0.4999979},
{4.61,0.4999980},
{4.62,0.4999981},
{4.63,0.4999982},
{4.64,0.4999983},
{4.65,0.4999983},
{4.66,0.4999984},
{4.67,0.4999985},
{4.68,0.4999986},
{4.69,0.4999986},
{4.7,0.4999987},
{4.71,0.4999988},
{4.72,0.4999988},
{4.73,0.4999989},
{4.74,0.4999989},
{4.75,0.4999990},
{4.76,0.4999990},
{4.77,0.4999991},
{4.78,0.4999991},
{4.79,0.4999992},
{4.8,0.4999992},
{4.81,0.4999992},
{4.82,0.4999993},
{4.83,0.4999993},
{4.84,0.4999994},
{4.85,0.4999994},
{4.86,0.4999994},
{4.87,0.4999994},
{4.88,0.4999995},
{4.89,0.4999995},
{4.9,0.4999995},
{4.91,0.4999995},
{4.92,0.4999996},
{4.93,0.4999996},
{4.94,0.4999996},
{4.95,0.4999996},
{4.96,0.4999996},
{4.97,0.4999997},
{4.98,0.4999997},
{4.99,0.4999997}};
            
            //OpenFileDialog ofd = new OpenFileDialog();
            //if (ofd.ShowDialog() == true)
            //{
            //    Microsoft.Office.Interop.Excel.Application ObjExcel = new Microsoft.Office.Interop.Excel.Application();
            //    Microsoft.Office.Interop.Excel.Workbook ObjWorkbook = ObjExcel.Workbooks.Open(ofd.FileName, 0, false, 5, "", "", false, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "", true, false, 0, true, false, false);
            //    Microsoft.Office.Interop.Excel.Worksheet objworksheet = (Microsoft.Office.Interop.Excel.Worksheet)ObjWorkbook.Sheets[1];
            //    for (int i = 1; i < 501; i++)
            //    {
            //        Microsoft.Office.Interop.Excel.Range range = objworksheet.get_Range("A" + i.ToString(), "A" + i.ToString());
            //        if(double.Parse(range.Text)==argument)
            //        {
            //            range = objworksheet.get_Range("B" + i.ToString(), "B" + i.ToString());
            //            value = double.Parse(range.Text);
            //        }
            //    }
            //    ObjExcel.Quit();
            //}

            foreach(KeyValuePair<double,double> x in Laplas)
            {
                if (x.Key == argument) value = x.Value;
            }

            return value;
        }
    }
}
